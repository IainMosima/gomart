// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: category.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (category_name, parent_id)
VALUES ($1, $2)
RETURNING category_id, category_name, parent_id, created_at, updated_at, is_deleted
`

type CreateCategoryParams struct {
	CategoryName string      `json:"category_name"`
	ParentID     pgtype.UUID `json:"parent_id"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, arg.CategoryName, arg.ParentID)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.CategoryName,
		&i.ParentID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getCategory = `-- name: GetCategory :one
SELECT category_id, category_name, parent_id, created_at, updated_at, is_deleted
FROM categories
WHERE category_id = $1 AND is_deleted = FALSE
`

func (q *Queries) GetCategory(ctx context.Context, categoryID uuid.UUID) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, categoryID)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.CategoryName,
		&i.ParentID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getCategoryAverageProductPrice = `-- name: GetCategoryAverageProductPrice :one
SELECT COALESCE(AVG(p.price), 0.00)::DECIMAL(10,2) as average_price
FROM categories c
LEFT JOIN products p ON c.category_id = p.category_id 
WHERE c.category_id = $1 AND c.is_deleted = FALSE 
AND (p.is_deleted = FALSE OR p.is_deleted IS NULL) 
AND (p.is_active = TRUE OR p.is_active IS NULL)
`

func (q *Queries) GetCategoryAverageProductPrice(ctx context.Context, categoryID uuid.UUID) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, getCategoryAverageProductPrice, categoryID)
	var average_price pgtype.Numeric
	err := row.Scan(&average_price)
	return average_price, err
}

const getCategoryChildren = `-- name: GetCategoryChildren :many
SELECT category_id, category_name, parent_id, created_at, updated_at, is_deleted
FROM categories
WHERE parent_id = $1 AND is_deleted = FALSE
ORDER BY category_name ASC
`

func (q *Queries) GetCategoryChildren(ctx context.Context, parentID pgtype.UUID) ([]Category, error) {
	rows, err := q.db.Query(ctx, getCategoryChildren, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.CategoryID,
			&i.CategoryName,
			&i.ParentID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRootCategories = `-- name: GetRootCategories :many
SELECT category_id, category_name, parent_id, created_at, updated_at, is_deleted
FROM categories
WHERE parent_id IS NULL AND is_deleted = FALSE
ORDER BY category_name ASC
`

func (q *Queries) GetRootCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, getRootCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.CategoryID,
			&i.CategoryName,
			&i.ParentID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategories = `-- name: ListCategories :many
SELECT category_id, category_name, parent_id, created_at, updated_at, is_deleted
FROM categories
WHERE is_deleted = FALSE
ORDER BY category_name ASC
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.CategoryID,
			&i.CategoryName,
			&i.ParentID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteCategory = `-- name: SoftDeleteCategory :exec
UPDATE categories
SET is_deleted = TRUE, updated_at = NOW()
WHERE category_id = $1 AND is_deleted = FALSE
`

func (q *Queries) SoftDeleteCategory(ctx context.Context, categoryID uuid.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteCategory, categoryID)
	return err
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET category_name = $2, updated_at = NOW()
WHERE category_id = $1 AND is_deleted = FALSE
RETURNING category_id, category_name, parent_id, created_at, updated_at, is_deleted
`

type UpdateCategoryParams struct {
	CategoryID   uuid.UUID `json:"category_id"`
	CategoryName string    `json:"category_name"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory, arg.CategoryID, arg.CategoryName)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.CategoryName,
		&i.ParentID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}
