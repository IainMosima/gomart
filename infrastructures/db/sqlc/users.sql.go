// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO customers (user_id, phone_number, user_name, email)
VALUES ($1, $2, $3, $4)
RETURNING user_id, phone_number, user_name, email
`

type CreateUserParams struct {
	UserID      uuid.UUID `json:"user_id"`
	PhoneNumber string    `json:"phone_number"`
	UserName    string    `json:"user_name"`
	Email       string    `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserID,
		arg.PhoneNumber,
		arg.UserName,
		arg.Email,
	)
	var i Customer
	err := row.Scan(
		&i.UserID,
		&i.PhoneNumber,
		&i.UserName,
		&i.Email,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_id, phone_number, user_name, email
FROM customers WHERE user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userID uuid.UUID) (Customer, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i Customer
	err := row.Scan(
		&i.UserID,
		&i.PhoneNumber,
		&i.UserName,
		&i.Email,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, phone_number, user_name, email
FROM customers WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (Customer, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i Customer
	err := row.Scan(
		&i.UserID,
		&i.PhoneNumber,
		&i.UserName,
		&i.Email,
	)
	return i, err
}
