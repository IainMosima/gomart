// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: customer.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countCustomers = `-- name: CountCustomers :one
SELECT COUNT(*) FROM customers WHERE is_deleted = FALSE
`

func (q *Queries) CountCustomers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countCustomers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (email, first_name, last_name, phone, address, city, postal_code, openid_sub, setup_completed)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING customer_id, email, first_name, last_name, phone, address, city, postal_code, openid_sub, setup_completed, created_at, updated_at, is_deleted
`

type CreateCustomerParams struct {
	Email          string      `json:"email"`
	FirstName      string      `json:"first_name"`
	LastName       string      `json:"last_name"`
	Phone          pgtype.Text `json:"phone"`
	Address        pgtype.Text `json:"address"`
	City           pgtype.Text `json:"city"`
	PostalCode     pgtype.Text `json:"postal_code"`
	OpenidSub      string      `json:"openid_sub"`
	SetupCompleted pgtype.Bool `json:"setup_completed"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
		arg.Address,
		arg.City,
		arg.PostalCode,
		arg.OpenidSub,
		arg.SetupCompleted,
	)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Address,
		&i.City,
		&i.PostalCode,
		&i.OpenidSub,
		&i.SetupCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getCustomer = `-- name: GetCustomer :one
SELECT customer_id, email, first_name, last_name, phone, address, city, postal_code, openid_sub, setup_completed, created_at, updated_at, is_deleted
FROM customers
WHERE customer_id = $1 AND is_deleted = FALSE
`

func (q *Queries) GetCustomer(ctx context.Context, customerID uuid.UUID) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, customerID)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Address,
		&i.City,
		&i.PostalCode,
		&i.OpenidSub,
		&i.SetupCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getCustomerByEmail = `-- name: GetCustomerByEmail :one
SELECT customer_id, email, first_name, last_name, phone, address, city, postal_code, openid_sub, setup_completed, created_at, updated_at, is_deleted
FROM customers
WHERE email = $1 AND is_deleted = FALSE
`

func (q *Queries) GetCustomerByEmail(ctx context.Context, email string) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByEmail, email)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Address,
		&i.City,
		&i.PostalCode,
		&i.OpenidSub,
		&i.SetupCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getCustomerByOpenIDSub = `-- name: GetCustomerByOpenIDSub :one
SELECT customer_id, email, first_name, last_name, phone, address, city, postal_code, openid_sub, setup_completed, created_at, updated_at, is_deleted
FROM customers
WHERE openid_sub = $1 AND is_deleted = FALSE
`

func (q *Queries) GetCustomerByOpenIDSub(ctx context.Context, openidSub string) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByOpenIDSub, openidSub)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Address,
		&i.City,
		&i.PostalCode,
		&i.OpenidSub,
		&i.SetupCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT customer_id, email, first_name, last_name, phone, address, city, postal_code, openid_sub, setup_completed, created_at, updated_at, is_deleted
FROM customers
WHERE is_deleted = FALSE
ORDER BY created_at DESC
`

func (q *Queries) ListCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.CustomerID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Phone,
			&i.Address,
			&i.City,
			&i.PostalCode,
			&i.OpenidSub,
			&i.SetupCompleted,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCustomersBySetupStatus = `-- name: ListCustomersBySetupStatus :many
SELECT customer_id, email, first_name, last_name, phone, address, city, postal_code, openid_sub, setup_completed, created_at, updated_at, is_deleted
FROM customers
WHERE setup_completed = $1 AND is_deleted = FALSE
ORDER BY created_at DESC
`

func (q *Queries) ListCustomersBySetupStatus(ctx context.Context, setupCompleted pgtype.Bool) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomersBySetupStatus, setupCompleted)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.CustomerID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Phone,
			&i.Address,
			&i.City,
			&i.PostalCode,
			&i.OpenidSub,
			&i.SetupCompleted,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteCustomer = `-- name: SoftDeleteCustomer :exec
UPDATE customers
SET is_deleted = TRUE, updated_at = NOW()
WHERE customer_id = $1 AND is_deleted = FALSE
`

func (q *Queries) SoftDeleteCustomer(ctx context.Context, customerID uuid.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteCustomer, customerID)
	return err
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
SET email = $2, first_name = $3, last_name = $4, phone = $5, address = $6, city = $7, postal_code = $8, updated_at = NOW()
WHERE customer_id = $1 AND is_deleted = FALSE
RETURNING customer_id, email, first_name, last_name, phone, address, city, postal_code, openid_sub, setup_completed, created_at, updated_at, is_deleted
`

type UpdateCustomerParams struct {
	CustomerID uuid.UUID   `json:"customer_id"`
	Email      string      `json:"email"`
	FirstName  string      `json:"first_name"`
	LastName   string      `json:"last_name"`
	Phone      pgtype.Text `json:"phone"`
	Address    pgtype.Text `json:"address"`
	City       pgtype.Text `json:"city"`
	PostalCode pgtype.Text `json:"postal_code"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomer,
		arg.CustomerID,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
		arg.Address,
		arg.City,
		arg.PostalCode,
	)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Address,
		&i.City,
		&i.PostalCode,
		&i.OpenidSub,
		&i.SetupCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const updateCustomerSetupStatus = `-- name: UpdateCustomerSetupStatus :one
UPDATE customers
SET setup_completed = $2, updated_at = NOW()
WHERE customer_id = $1 AND is_deleted = FALSE
RETURNING customer_id, email, first_name, last_name, phone, address, city, postal_code, openid_sub, setup_completed, created_at, updated_at, is_deleted
`

type UpdateCustomerSetupStatusParams struct {
	CustomerID     uuid.UUID   `json:"customer_id"`
	SetupCompleted pgtype.Bool `json:"setup_completed"`
}

func (q *Queries) UpdateCustomerSetupStatus(ctx context.Context, arg UpdateCustomerSetupStatusParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomerSetupStatus, arg.CustomerID, arg.SetupCompleted)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Address,
		&i.City,
		&i.PostalCode,
		&i.OpenidSub,
		&i.SetupCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}
