// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order_item.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countOrderItems = `-- name: CountOrderItems :one
SELECT COUNT(*) FROM order_items WHERE is_deleted = FALSE
`

func (q *Queries) CountOrderItems(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countOrderItems)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countOrderItemsByOrder = `-- name: CountOrderItemsByOrder :one
SELECT COUNT(*) FROM order_items WHERE order_id = $1 AND is_deleted = FALSE
`

func (q *Queries) CountOrderItemsByOrder(ctx context.Context, orderID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countOrderItemsByOrder, orderID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (order_id, product_id, quantity, unit_price, total_price)
VALUES ($1, $2, $3, $4, $5)
RETURNING order_item_id, order_id, product_id, quantity, unit_price, total_price, created_at, is_deleted
`

type CreateOrderItemParams struct {
	OrderID    uuid.UUID      `json:"order_id"`
	ProductID  uuid.UUID      `json:"product_id"`
	Quantity   int32          `json:"quantity"`
	UnitPrice  pgtype.Numeric `json:"unit_price"`
	TotalPrice pgtype.Numeric `json:"total_price"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, createOrderItem,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.UnitPrice,
		arg.TotalPrice,
	)
	var i OrderItem
	err := row.Scan(
		&i.OrderItemID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.UnitPrice,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getOrderItem = `-- name: GetOrderItem :one
SELECT order_item_id, order_id, product_id, quantity, unit_price, total_price, created_at, is_deleted
FROM order_items
WHERE order_item_id = $1 AND is_deleted = FALSE
`

func (q *Queries) GetOrderItem(ctx context.Context, orderItemID uuid.UUID) (OrderItem, error) {
	row := q.db.QueryRow(ctx, getOrderItem, orderItemID)
	var i OrderItem
	err := row.Scan(
		&i.OrderItemID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.UnitPrice,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getOrderItemsWithDetails = `-- name: GetOrderItemsWithDetails :many
SELECT oi.order_item_id, oi.order_id, oi.product_id, oi.quantity, oi.unit_price, oi.total_price, oi.created_at, oi.is_deleted,
       p.product_name, p.sku, p.description
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
WHERE oi.order_id = $1 AND oi.is_deleted = FALSE AND p.is_deleted = FALSE
ORDER BY oi.created_at ASC
`

type GetOrderItemsWithDetailsRow struct {
	OrderItemID uuid.UUID          `json:"order_item_id"`
	OrderID     uuid.UUID          `json:"order_id"`
	ProductID   uuid.UUID          `json:"product_id"`
	Quantity    int32              `json:"quantity"`
	UnitPrice   pgtype.Numeric     `json:"unit_price"`
	TotalPrice  pgtype.Numeric     `json:"total_price"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	IsDeleted   pgtype.Bool        `json:"is_deleted"`
	ProductName string             `json:"product_name"`
	Sku         string             `json:"sku"`
	Description pgtype.Text        `json:"description"`
}

func (q *Queries) GetOrderItemsWithDetails(ctx context.Context, orderID uuid.UUID) ([]GetOrderItemsWithDetailsRow, error) {
	rows, err := q.db.Query(ctx, getOrderItemsWithDetails, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOrderItemsWithDetailsRow{}
	for rows.Next() {
		var i GetOrderItemsWithDetailsRow
		if err := rows.Scan(
			&i.OrderItemID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.UnitPrice,
			&i.TotalPrice,
			&i.CreatedAt,
			&i.IsDeleted,
			&i.ProductName,
			&i.Sku,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderTotalFromItems = `-- name: GetOrderTotalFromItems :one
SELECT COALESCE(SUM(total_price), 0) as order_total
FROM order_items
WHERE order_id = $1 AND is_deleted = FALSE
`

func (q *Queries) GetOrderTotalFromItems(ctx context.Context, orderID uuid.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, getOrderTotalFromItems, orderID)
	var order_total interface{}
	err := row.Scan(&order_total)
	return order_total, err
}

const listOrderItems = `-- name: ListOrderItems :many
SELECT order_item_id, order_id, product_id, quantity, unit_price, total_price, created_at, is_deleted
FROM order_items
WHERE is_deleted = FALSE
ORDER BY created_at DESC
`

func (q *Queries) ListOrderItems(ctx context.Context) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, listOrderItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.OrderItemID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.UnitPrice,
			&i.TotalPrice,
			&i.CreatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrderItemsByOrder = `-- name: ListOrderItemsByOrder :many
SELECT order_item_id, order_id, product_id, quantity, unit_price, total_price, created_at, is_deleted
FROM order_items
WHERE order_id = $1 AND is_deleted = FALSE
ORDER BY created_at ASC
`

func (q *Queries) ListOrderItemsByOrder(ctx context.Context, orderID uuid.UUID) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, listOrderItemsByOrder, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.OrderItemID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.UnitPrice,
			&i.TotalPrice,
			&i.CreatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrderItemsByProduct = `-- name: ListOrderItemsByProduct :many
SELECT order_item_id, order_id, product_id, quantity, unit_price, total_price, created_at, is_deleted
FROM order_items
WHERE product_id = $1 AND is_deleted = FALSE
ORDER BY created_at DESC
`

func (q *Queries) ListOrderItemsByProduct(ctx context.Context, productID uuid.UUID) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, listOrderItemsByProduct, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.OrderItemID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.UnitPrice,
			&i.TotalPrice,
			&i.CreatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteOrderItem = `-- name: SoftDeleteOrderItem :exec
UPDATE order_items
SET is_deleted = TRUE
WHERE order_item_id = $1 AND is_deleted = FALSE
`

func (q *Queries) SoftDeleteOrderItem(ctx context.Context, orderItemID uuid.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteOrderItem, orderItemID)
	return err
}

const softDeleteOrderItemsByOrder = `-- name: SoftDeleteOrderItemsByOrder :exec
UPDATE order_items
SET is_deleted = TRUE
WHERE order_id = $1 AND is_deleted = FALSE
`

func (q *Queries) SoftDeleteOrderItemsByOrder(ctx context.Context, orderID uuid.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteOrderItemsByOrder, orderID)
	return err
}

const updateOrderItem = `-- name: UpdateOrderItem :one
UPDATE order_items
SET quantity = $2, unit_price = $3, total_price = $4
WHERE order_item_id = $1 AND is_deleted = FALSE
RETURNING order_item_id, order_id, product_id, quantity, unit_price, total_price, created_at, is_deleted
`

type UpdateOrderItemParams struct {
	OrderItemID uuid.UUID      `json:"order_item_id"`
	Quantity    int32          `json:"quantity"`
	UnitPrice   pgtype.Numeric `json:"unit_price"`
	TotalPrice  pgtype.Numeric `json:"total_price"`
}

func (q *Queries) UpdateOrderItem(ctx context.Context, arg UpdateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, updateOrderItem,
		arg.OrderItemID,
		arg.Quantity,
		arg.UnitPrice,
		arg.TotalPrice,
	)
	var i OrderItem
	err := row.Scan(
		&i.OrderItemID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.UnitPrice,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const updateOrderItemQuantity = `-- name: UpdateOrderItemQuantity :one
UPDATE order_items
SET quantity = $2, total_price = quantity * unit_price
WHERE order_item_id = $1 AND is_deleted = FALSE
RETURNING order_item_id, order_id, product_id, quantity, unit_price, total_price, created_at, is_deleted
`

type UpdateOrderItemQuantityParams struct {
	OrderItemID uuid.UUID `json:"order_item_id"`
	Quantity    int32     `json:"quantity"`
}

func (q *Queries) UpdateOrderItemQuantity(ctx context.Context, arg UpdateOrderItemQuantityParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, updateOrderItemQuantity, arg.OrderItemID, arg.Quantity)
	var i OrderItem
	err := row.Scan(
		&i.OrderItemID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.UnitPrice,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.IsDeleted,
	)
	return i, err
}
