// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (product_name, description, price, sku, stock_quantity, category_id, is_active)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING product_id, product_name, description, price, sku, stock_quantity, category_id, is_active, created_at, updated_at, is_deleted
`

type CreateProductParams struct {
	ProductName   string         `json:"product_name"`
	Description   pgtype.Text    `json:"description"`
	Price         pgtype.Numeric `json:"price"`
	Sku           string         `json:"sku"`
	StockQuantity int32          `json:"stock_quantity"`
	CategoryID    uuid.UUID      `json:"category_id"`
	IsActive      pgtype.Bool    `json:"is_active"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.ProductName,
		arg.Description,
		arg.Price,
		arg.Sku,
		arg.StockQuantity,
		arg.CategoryID,
		arg.IsActive,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.Description,
		&i.Price,
		&i.Sku,
		&i.StockQuantity,
		&i.CategoryID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
UPDATE products
SET is_deleted = TRUE, updated_at = NOW()
WHERE product_id = $1 AND is_deleted = FALSE
`

func (q *Queries) DeleteProduct(ctx context.Context, productID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProduct, productID)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT product_id, product_name, description, price, sku, stock_quantity, category_id, is_active, created_at, updated_at, is_deleted
FROM products
WHERE product_id = $1 AND is_deleted = FALSE
`

func (q *Queries) GetProduct(ctx context.Context, productID uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, productID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.Description,
		&i.Price,
		&i.Sku,
		&i.StockQuantity,
		&i.CategoryID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getProductsByCategory = `-- name: GetProductsByCategory :many
SELECT product_id, product_name, description, price, sku, stock_quantity, category_id, is_active, created_at, updated_at, is_deleted
FROM products
WHERE category_id = $1 AND is_deleted = FALSE
ORDER BY product_name ASC
`

func (q *Queries) GetProductsByCategory(ctx context.Context, categoryID uuid.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.ProductName,
			&i.Description,
			&i.Price,
			&i.Sku,
			&i.StockQuantity,
			&i.CategoryID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT product_id, product_name, description, price, sku, stock_quantity, category_id, is_active, created_at, updated_at, is_deleted
FROM products
WHERE is_deleted = FALSE
ORDER BY created_at DESC
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.ProductName,
			&i.Description,
			&i.Price,
			&i.Sku,
			&i.StockQuantity,
			&i.CategoryID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET product_name = $2, description = $3, price = $4, stock_quantity = $5, category_id = $6, is_active = $7, updated_at = NOW()
WHERE product_id = $1 AND is_deleted = FALSE
RETURNING product_id, product_name, description, price, sku, stock_quantity, category_id, is_active, created_at, updated_at, is_deleted
`

type UpdateProductParams struct {
	ProductID     uuid.UUID      `json:"product_id"`
	ProductName   string         `json:"product_name"`
	Description   pgtype.Text    `json:"description"`
	Price         pgtype.Numeric `json:"price"`
	StockQuantity int32          `json:"stock_quantity"`
	CategoryID    uuid.UUID      `json:"category_id"`
	IsActive      pgtype.Bool    `json:"is_active"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ProductID,
		arg.ProductName,
		arg.Description,
		arg.Price,
		arg.StockQuantity,
		arg.CategoryID,
		arg.IsActive,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.Description,
		&i.Price,
		&i.Sku,
		&i.StockQuantity,
		&i.CategoryID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}
