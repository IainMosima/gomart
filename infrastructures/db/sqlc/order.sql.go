// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (customer_id, order_number, status, total_amount)
VALUES ($1, $2, $3, $4)
RETURNING order_id, customer_id, order_number, status, total_amount, created_at, updated_at, is_deleted
`

type CreateOrderParams struct {
	CustomerID  uuid.UUID      `json:"customer_id"`
	OrderNumber string         `json:"order_number"`
	Status      pgtype.Text    `json:"status"`
	TotalAmount pgtype.Numeric `json:"total_amount"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.CustomerID,
		arg.OrderNumber,
		arg.Status,
		arg.TotalAmount,
	)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.CustomerID,
		&i.OrderNumber,
		&i.Status,
		&i.TotalAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT order_id, customer_id, order_number, status, total_amount, created_at, updated_at, is_deleted
FROM orders
WHERE order_id = $1 AND is_deleted = FALSE
`

func (q *Queries) GetOrder(ctx context.Context, orderID uuid.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, orderID)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.CustomerID,
		&i.OrderNumber,
		&i.Status,
		&i.TotalAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}
