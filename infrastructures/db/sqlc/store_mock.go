// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockStore) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, arg)
	ret0, _ := ret[0].(Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockStoreMockRecorder) CreateCategory(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockStore)(nil).CreateCategory), ctx, arg)
}

// GetCategory mocks base method.
func (m *MockStore) GetCategory(ctx context.Context, categoryID uuid.UUID) (Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", ctx, categoryID)
	ret0, _ := ret[0].(Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockStoreMockRecorder) GetCategory(ctx, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockStore)(nil).GetCategory), ctx, categoryID)
}

// GetCategoryChildren mocks base method.
func (m *MockStore) GetCategoryChildren(ctx context.Context, parentID pgtype.UUID) ([]Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryChildren", ctx, parentID)
	ret0, _ := ret[0].([]Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryChildren indicates an expected call of GetCategoryChildren.
func (mr *MockStoreMockRecorder) GetCategoryChildren(ctx, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryChildren", reflect.TypeOf((*MockStore)(nil).GetCategoryChildren), ctx, parentID)
}

// GetRootCategories mocks base method.
func (m *MockStore) GetRootCategories(ctx context.Context) ([]Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootCategories", ctx)
	ret0, _ := ret[0].([]Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootCategories indicates an expected call of GetRootCategories.
func (mr *MockStoreMockRecorder) GetRootCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootCategories", reflect.TypeOf((*MockStore)(nil).GetRootCategories), ctx)
}

// ListCategories mocks base method.
func (m *MockStore) ListCategories(ctx context.Context) ([]Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories", ctx)
	ret0, _ := ret[0].([]Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockStoreMockRecorder) ListCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockStore)(nil).ListCategories), ctx)
}

// UpdateCategory mocks base method.
func (m *MockStore) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, arg)
	ret0, _ := ret[0].(Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockStoreMockRecorder) UpdateCategory(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockStore)(nil).UpdateCategory), ctx, arg)
}

// SoftDeleteCategory mocks base method.
func (m *MockStore) SoftDeleteCategory(ctx context.Context, categoryID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteCategory", ctx, categoryID)
	ret0, _ := ret[1].(error)
	return ret0
}

// SoftDeleteCategory indicates an expected call of SoftDeleteCategory.
func (mr *MockStoreMockRecorder) SoftDeleteCategory(ctx, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteCategory", reflect.TypeOf((*MockStore)(nil).SoftDeleteCategory), ctx, categoryID)
}
