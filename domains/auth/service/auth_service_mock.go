// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/apple/Desktop/side-projects/gomart/domains/auth/service/auth_service_int.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	schema "github.com/IainMosima/gomart/domains/auth/schema"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// GetAuthURL mocks base method.
func (m *MockAuthService) GetAuthURL(state string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthURL", state)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthURL indicates an expected call of GetAuthURL.
func (mr *MockAuthServiceMockRecorder) GetAuthURL(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthURL", reflect.TypeOf((*MockAuthService)(nil).GetAuthURL), state)
}

// HandleCallback mocks base method.
func (m *MockAuthService) HandleCallback(ctx context.Context, req *schema.HandleCallbackRequest) (*schema.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCallback", ctx, req)
	ret0, _ := ret[0].(*schema.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleCallback indicates an expected call of HandleCallback.
func (mr *MockAuthServiceMockRecorder) HandleCallback(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCallback", reflect.TypeOf((*MockAuthService)(nil).HandleCallback), ctx, req)
}

// RefreshAccessToken mocks base method.
func (m *MockAuthService) RefreshAccessToken(ctx context.Context, req *schema.RefreshTokenRequest) (*schema.RefreshTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshAccessToken", ctx, req)
	ret0, _ := ret[0].(*schema.RefreshTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshAccessToken indicates an expected call of RefreshAccessToken.
func (mr *MockAuthServiceMockRecorder) RefreshAccessToken(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAccessToken", reflect.TypeOf((*MockAuthService)(nil).RefreshAccessToken), ctx, req)
}

// ValidateToken mocks base method.
func (m *MockAuthService) ValidateToken(ctx context.Context, accessToken string) (*schema.UserInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, accessToken)
	ret0, _ := ret[0].(*schema.UserInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthServiceMockRecorder) ValidateToken(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthService)(nil).ValidateToken), ctx, accessToken)
}
