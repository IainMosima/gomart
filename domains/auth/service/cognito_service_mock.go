// Code generated by MockGen. DO NOT EDIT.
// Source: domains/auth/service/cognito_service_int.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	schema "github.com/IainMosima/gomart/domains/auth/schema"
	gomock "go.uber.org/mock/gomock"
)

// MockCognitoServiceInterface is a mock of CognitoServiceInterface interface.
type MockCognitoServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCognitoServiceInterfaceMockRecorder
}

// MockCognitoServiceInterfaceMockRecorder is the mock recorder for MockCognitoServiceInterface.
type MockCognitoServiceInterfaceMockRecorder struct {
	mock *MockCognitoServiceInterface
}

// NewMockCognitoServiceInterface creates a new mock instance.
func NewMockCognitoServiceInterface(ctrl *gomock.Controller) *MockCognitoServiceInterface {
	mock := &MockCognitoServiceInterface{ctrl: ctrl}
	mock.recorder = &MockCognitoServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCognitoServiceInterface) EXPECT() *MockCognitoServiceInterfaceMockRecorder {
	return m.recorder
}

// ExchangeCodeForTokens mocks base method.
func (m *MockCognitoServiceInterface) ExchangeCodeForTokens(ctx context.Context, code string) (*schema.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeCodeForTokens", ctx, code)
	ret0, _ := ret[0].(*schema.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeCodeForTokens indicates an expected call of ExchangeCodeForTokens.
func (mr *MockCognitoServiceInterfaceMockRecorder) ExchangeCodeForTokens(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeCodeForTokens", reflect.TypeOf((*MockCognitoServiceInterface)(nil).ExchangeCodeForTokens), ctx, code)
}

// GetAuthURL mocks base method.
func (m *MockCognitoServiceInterface) GetAuthURL(state string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthURL", state)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthURL indicates an expected call of GetAuthURL.
func (mr *MockCognitoServiceInterfaceMockRecorder) GetAuthURL(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthURL", reflect.TypeOf((*MockCognitoServiceInterface)(nil).GetAuthURL), state)
}

// ParseIDToken mocks base method.
func (m *MockCognitoServiceInterface) ParseIDToken(ctx context.Context, idToken string) (*schema.CognitoUserInfoJWTClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseIDToken", ctx, idToken)
	ret0, _ := ret[0].(*schema.CognitoUserInfoJWTClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseIDToken indicates an expected call of ParseIDToken.
func (mr *MockCognitoServiceInterfaceMockRecorder) ParseIDToken(ctx, idToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseIDToken", reflect.TypeOf((*MockCognitoServiceInterface)(nil).ParseIDToken), ctx, idToken)
}

// RefreshTokens mocks base method.
func (m *MockCognitoServiceInterface) RefreshTokens(ctx context.Context, refreshToken string) (*schema.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokens", ctx, refreshToken)
	ret0, _ := ret[0].(*schema.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshTokens indicates an expected call of RefreshTokens.
func (mr *MockCognitoServiceInterfaceMockRecorder) RefreshTokens(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokens", reflect.TypeOf((*MockCognitoServiceInterface)(nil).RefreshTokens), ctx, refreshToken)
}

// ValidateAccessToken mocks base method.
func (m *MockCognitoServiceInterface) ValidateAccessToken(ctx context.Context, accessToken string) (*schema.UserInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAccessToken", ctx, accessToken)
	ret0, _ := ret[0].(*schema.UserInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAccessToken indicates an expected call of ValidateAccessToken.
func (mr *MockCognitoServiceInterfaceMockRecorder) ValidateAccessToken(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAccessToken", reflect.TypeOf((*MockCognitoServiceInterface)(nil).ValidateAccessToken), ctx, accessToken)
}
