// Code generated by MockGen. DO NOT EDIT.
// Source: category_repo_int.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/IainMosima/gomart/domains/category/entity"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCategoryRepository is a mock of CategoryRepository interface.
type MockCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRepositoryMockRecorder
}

// MockCategoryRepositoryMockRecorder is the mock recorder for MockCategoryRepository.
type MockCategoryRepositoryMockRecorder struct {
	mock *MockCategoryRepository
}

// NewMockCategoryRepository creates a new mock instance.
func NewMockCategoryRepository(ctrl *gomock.Controller) *MockCategoryRepository {
	mock := &MockCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRepository) EXPECT() *MockCategoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCategoryRepository) Create(ctx context.Context, category *entity.Category) (*entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, category)
	ret0, _ := ret[0].(*entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCategoryRepositoryMockRecorder) Create(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCategoryRepository)(nil).Create), ctx, category)
}

// GetAll mocks base method.
func (m *MockCategoryRepository) GetAll(ctx context.Context) ([]entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCategoryRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCategoryRepository)(nil).GetAll), ctx)
}

// GetAverageProductPrice mocks base method.
func (m *MockCategoryRepository) GetAverageProductPrice(ctx context.Context, categoryID uuid.UUID) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAverageProductPrice", ctx, categoryID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAverageProductPrice indicates an expected call of GetAverageProductPrice.
func (mr *MockCategoryRepositoryMockRecorder) GetAverageProductPrice(ctx, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAverageProductPrice", reflect.TypeOf((*MockCategoryRepository)(nil).GetAverageProductPrice), ctx, categoryID)
}

// GetByID mocks base method.
func (m *MockCategoryRepository) GetByID(ctx context.Context, categoryID uuid.UUID) (*entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, categoryID)
	ret0, _ := ret[0].(*entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCategoryRepositoryMockRecorder) GetByID(ctx, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCategoryRepository)(nil).GetByID), ctx, categoryID)
}

// GetByParent mocks base method.
func (m *MockCategoryRepository) GetByParent(ctx context.Context, parentID *uuid.UUID) ([]entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByParent", ctx, parentID)
	ret0, _ := ret[0].([]entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByParent indicates an expected call of GetByParent.
func (mr *MockCategoryRepositoryMockRecorder) GetByParent(ctx, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByParent", reflect.TypeOf((*MockCategoryRepository)(nil).GetByParent), ctx, parentID)
}

// GetRootCategories mocks base method.
func (m *MockCategoryRepository) GetRootCategories(ctx context.Context) ([]entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootCategories", ctx)
	ret0, _ := ret[0].([]entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootCategories indicates an expected call of GetRootCategories.
func (mr *MockCategoryRepositoryMockRecorder) GetRootCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootCategories", reflect.TypeOf((*MockCategoryRepository)(nil).GetRootCategories), ctx)
}

// SoftDelete mocks base method.
func (m *MockCategoryRepository) SoftDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDelete indicates an expected call of SoftDelete.
func (mr *MockCategoryRepositoryMockRecorder) SoftDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDelete", reflect.TypeOf((*MockCategoryRepository)(nil).SoftDelete), ctx, id)
}

// Update mocks base method.
func (m *MockCategoryRepository) Update(ctx context.Context, category *entity.Category) (*entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, category)
	ret0, _ := ret[0].(*entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCategoryRepositoryMockRecorder) Update(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCategoryRepository)(nil).Update), ctx, category)
}
