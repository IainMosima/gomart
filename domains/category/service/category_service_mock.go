// Code generated by MockGen. DO NOT EDIT.
// Source: category_service_int.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	schema "github.com/IainMosima/gomart/domains/category/schema"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCategoryService is a mock of CategoryService interface.
type MockCategoryService struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryServiceMockRecorder
}

// MockCategoryServiceMockRecorder is the mock recorder for MockCategoryService.
type MockCategoryServiceMockRecorder struct {
	mock *MockCategoryService
}

// NewMockCategoryService creates a new mock instance.
func NewMockCategoryService(ctrl *gomock.Controller) *MockCategoryService {
	mock := &MockCategoryService{ctrl: ctrl}
	mock.recorder = &MockCategoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryService) EXPECT() *MockCategoryServiceMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockCategoryService) CreateCategory(ctx context.Context, req *schema.CreateCategoryRequest) (*schema.CategoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, req)
	ret0, _ := ret[0].(*schema.CategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockCategoryServiceMockRecorder) CreateCategory(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockCategoryService)(nil).CreateCategory), ctx, req)
}

// GetCategory mocks base method.
func (m *MockCategoryService) GetCategory(ctx context.Context, categoryID uuid.UUID) (*schema.CategoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", ctx, categoryID)
	ret0, _ := ret[0].(*schema.CategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockCategoryServiceMockRecorder) GetCategory(ctx, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockCategoryService)(nil).GetCategory), ctx, categoryID)
}

// GetCategoryAverageProductPrice mocks base method.
func (m *MockCategoryService) GetCategoryAverageProductPrice(ctx context.Context, categoryID uuid.UUID) (*schema.CategoryAverageProductPriceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryAverageProductPrice", ctx, categoryID)
	ret0, _ := ret[0].(*schema.CategoryAverageProductPriceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryAverageProductPrice indicates an expected call of GetCategoryAverageProductPrice.
func (mr *MockCategoryServiceMockRecorder) GetCategoryAverageProductPrice(ctx, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryAverageProductPrice", reflect.TypeOf((*MockCategoryService)(nil).GetCategoryAverageProductPrice), ctx, categoryID)
}

// GetCategoryChildren mocks base method.
func (m *MockCategoryService) GetCategoryChildren(ctx context.Context, parentID *uuid.UUID) (*schema.CategoryListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryChildren", ctx, parentID)
	ret0, _ := ret[0].(*schema.CategoryListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryChildren indicates an expected call of GetCategoryChildren.
func (mr *MockCategoryServiceMockRecorder) GetCategoryChildren(ctx, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryChildren", reflect.TypeOf((*MockCategoryService)(nil).GetCategoryChildren), ctx, parentID)
}

// ListCategories mocks base method.
func (m *MockCategoryService) ListCategories(ctx context.Context, req *schema.ListCategoriesRequest) (*schema.CategoryListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories", ctx, req)
	ret0, _ := ret[0].(*schema.CategoryListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockCategoryServiceMockRecorder) ListCategories(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockCategoryService)(nil).ListCategories), ctx, req)
}

// UpdateCategory mocks base method.
func (m *MockCategoryService) UpdateCategory(ctx context.Context, categoryID uuid.UUID, req *schema.UpdateCategoryRequest) (*schema.CategoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, categoryID, req)
	ret0, _ := ret[0].(*schema.CategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockCategoryServiceMockRecorder) UpdateCategory(ctx, categoryID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockCategoryService)(nil).UpdateCategory), ctx, categoryID, req)
}
